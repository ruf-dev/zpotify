syntax = "proto3";

package zpotify_api;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "npm.proto";

import "zpotify_common.proto";
import "zpotify_user.proto";

option go_package = "go.zpotify.ru/zpotify/pkg/zpotify_api;zpotify_api";
option (npm_package) = "@zpotify/api";

service ZpotifyAPI {
  rpc Version(Version.Request) returns (Version.Response) {
    option (google.api.http) = {
      get: "/api/version"
    };
  };

  rpc ListSongs(ListSongs.Request) returns (ListSongs.Response) {
    option (google.api.http) = {
      post: "/api/songs",
      body: "*"
    };
  }

  rpc DeleteSong(DeleteSong.Request) returns (DeleteSong.Response) {
    option (google.api.http) = {
      delete: "/api/songs/{unique_id}",
    };
  }
}

service UserAPI {
  //  Only Telegram auth is supported
  rpc Auth(Auth.Request) returns (stream Auth.Response) {
    option (google.api.http) = {
      post: "/api/user/auth"
      body: "*"
    };
  }

  rpc RefreshToken(Refresh.Request) returns (Refresh.Response) {
    option (google.api.http) = {
      post: "/api/user/refresh_token"
      body: "*"
    };
  }

  rpc Me(Me.Request) returns (Me.Response) {
    option (google.api.http) = {
      get: "/api/user"
    };
  }
}

message Version {
  message Request {}

  message Response {
    string version = 1;
    google.protobuf.Timestamp client_timestamp = 2;
  }
}

message GetLink {
  message Request{
    string tg_id = 1;
  }

  message Response {
    string url = 2;
  }
}

message Auth {
  message Request {}

  message Response {
    oneof payload {
      string auth_uuid = 1;
      AuthData auth_data = 2;
    }
  }

  message AuthData {
    string access_token = 1;
    string refresh_token = 2;
    google.protobuf.Timestamp access_expires_at = 3;
    google.protobuf.Timestamp refresh_expires_at = 4;
  }
}

message UserData {
  string username = 1;
}

message Me {
  message Request {}

  message Response {
    UserData user_data = 1;
    Permissions permissions = 2;
  }
}

message Refresh {
  message Request {
    string refresh_token = 1;
  }

  message Response {
    Auth.AuthData auth_data = 1;
  }
}

message ListSongs {
  message Request {
    Paging paging = 1;

    optional uint64 random_hash = 2;
    optional string playlist_id = 3;
  }

  message Response {
    repeated SongBase songs = 1;
    uint64 total = 2;
    bool user_can_delete = 3;
  }
}

message DeleteSong {
  message Request {
    string unique_id = 1;
  }

  message Response {}
}
name: master-actions
run-name: RELEASE
on:
  push:
    branches:
      - "master"

jobs:
  image-build:
    runs-on: ${{ vars.UBUNTU_IMAGE }}
    steps:
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ hashFiles('**/Dockerfile', '**/go.sum', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: build
        uses: RedSockActions/release_image@v1.0.39
        with:
          DRYRUN: true
          REGISTRY_USER: ${{ vars.REGISTRY_USER }}
          REGISTRY_PWD: ${{ secrets.REGISTRY_PWD }}

      - name: Move new cache
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          else
            echo "No new buildx cache generated."
          fi

  tag-release:
    runs-on: ${{ vars.UBUNTU_IMAGE }}
    needs:
      - image-build
    steps:
      - name: Release tag
        id: release
        uses: RedSockActions/release_tag@v1.1.7
        with:
          token: ${{ github.token }}
    outputs:
      tag: ${{ steps.release.outputs.tag }}

  docker-registry-release:
    if: ${{ needs.tag-release.outputs.tag != '' }}
    runs-on: ${{ vars.UBUNTU_IMAGE }}
    needs:
      - tag-release
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ hashFiles('**/Dockerfile', '**/go.sum', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Release image
        uses: RedSockActions/release_image@v1.0.39
        with:
          REGISTRY_USER: ${{ vars.REGISTRY_USER }}
          REGISTRY_PWD:  ${{ secrets.REGISTRY_PWD }}
          DISABLE_CHECKOUT: true

  ui-release:
    if: ${{ needs.tag-release.outputs.tag != '' }}
    runs-on: ${{ vars.UBUNTU_IMAGE }}
    needs:
      - tag-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: Build
        run: |
          cd pkg/web/ZpotifyUI && \
          yarn install && \
          yarn build

      - name: Minio Deploy
        uses: marverlous811/minio-upload@v1.2.0
        with:
          endpoint: ${{ secrets.MINIO_ENDPOINT }}
          access_key: ${{ secrets.MINIO_ACCESS_KEY }}
          secret_key: ${{ secrets.MINIO_SECRET_KEY }}
          bucket: 'zpotify-ru'
          local_path: './pkg/web/ZpotifyUI/dist/*'
          remote_path: '/'
          recursive: true